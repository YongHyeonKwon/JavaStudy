package ex01상속기초;

public class Main {

	public static void main(String[] args) {
		// 실행하는 공간
		
		Child c = new Child();
		c.makeSteak();
		// 자식클래스가 부모클래스의 메소드를 오버라이딩한 경우
		// 오버라이딩한 메소드가 호출된다.
		
		c.makeAlio();
		
		//★ 자바에서 상속의 특징
		// 1. 다중상속을 지원하지 않는다. --> 하나의 부모의 클래스만 가질 수 있다.
		// 2. 상속의 횟수에 제한을 두지 않네요 ex) 족보
		// --> 하나의 클래스는 부모클래스가 될 수도 있고, 자식 클래스가 될 수도 있다.
		// --> 부모클래스는 여러개의 자식클래스를 가질 수 있다.
		// 3. 모든 클래스는 Object(최상위 클래스) 상속받는다. ex) 공통의 조상
		
		
		// 객체의 형변환(Casting)
		// 1. 기본 자료형의 형변환 데이터의 크기를 기준으로 자동 vs 강제 형변환 결정
		// --> boolean, int char, long, double, float, short, byte
		// double num = 4; --> 자동 형변환
		// why? double -> 8byte int -> 4byte
		// int num = (int)3.14; --> 강제 형변환
		
		// 2. 레퍼런스 타입의 자료형
		// : 객체 내 필드, 메소드의 접근권한을 기준으로 강제 vs 자동 형변환 결정
		// ★ 상속이 전제되어있을 때, 객체의 형변환 가능 ★
		
		// (1) 자동형변환(==업캐스팅)
		// : 자식클래스가 부모클래스 자료형으로 자동으로 형변환 하는 것을 업캐스팅이라고 부른다.
		// ex) 동물 --> 고양이 클래스가 상속
		// --> 고양이는 동물이다! 말이 된다!
		Parent p = new Child();
		p.makeSteak();
		// --> 업캐스팅 되었을 때, 자식클래스 (서브,하)가 부모클래스 (슈퍼,상위)의 메소드를
		//     오버라이딩 한 경우에는, 자식클래스의 메소드가 호출된다.
		
		// (2) 강제형변환(==다운캐스팅)
		// : 부모클래스가 자식클래스 강제 형변환 
		// >> ★ 업캐스팅된 객체를 다시 본래 자신의 형태로 강제적으로 되돌리는 것
//		Child ch = (Child) new Parent(); xxx
		// 코드를 작성하다가 빨간줄이 떠요 --> Syntax Error --> 구문 오류
		// 코드에는 문제가 없는데, 실행했을 때 문제상황 발생 --> Exception --> 예외상황
		// 구문에는 문제가 없지만, JVM이 코드를 해석하는 순간 예외가 발생

		Child ch = (Child)p;
		ch.makeBong();
		
	}

}
